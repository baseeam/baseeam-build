@using BaseEAM.Services.Security
@model ReturnItemModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().GridPageSizes;
    var primarySystemCurrencySymbol = EngineContext.Current.Resolve<BaseEAM.Core.IWorkContext>().WorkingCurrency.CurrencySymbol;

    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Inventory_Return_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Inventory_Return_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Inventory_Return_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Inventory_Return_Delete);
}
<div id="group-returnItems" class="panel-group" data-bind="visible: !isNew()">
    <div class="panel panel-default">
        <div class="panel-heading" data-bind="visible: !isApproved()">
            <button type="button" id="createReturnItems" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddMultiple")">
                <i class="fa fa-angle-double-down"></i>
            </button>
            <button type="button" id="deleteSelectedReturnItems" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Delete.Selected")">
                <i class="fa fa-trash-o"></i>
            </button>
        </div>
        <div class="panel-body">
            <div id="returnItems-grid" data-bind="gridDeleteRowEnabled: !isApproved()"></div>
            <script>
                var gridCheckboxHandler = new BaseEam.CheckBoxHandler('returnItems-grid');
                gridCheckboxHandler.init();

                $(document).ready(function () {
                    $("#returnItems-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("ReturnItemList", "Return"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData
                                },
                                parameterMap: function (data, operation) {
                                    sortMapping = [{ from: "IssueItem.ItemName", to: "IssueItem.Item.Name" },
                                                    { from: "IssueItem.ItemUnitOfMeasureName", to: "IssueItem.Item.UnitOfMeasure.Name" },
                                                    { from: "IssueItem.StoreLocatorName", to: "IssueItem.StoreLocator.Name" },
                                                    { from: "IssueItem.IssueNumber", to: "IssueItem.Issue.Number" },
                                                    { from: "IssueItem.IssueDate", to: "IssueItem.Issue.IssueDate" },
                                                    { from: "IssueItem.IssueQuantity", to: "IssueItem.IssueQuantity" }];
                                    BaseEam.Grid.mapSortColumns(data.sort, sortMapping);
                                    return data;
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @Html.Partial("_GridPagerMessages")
                        },
                        sortable: true,
                        editable: false,
                        scrollable: false,
                        dataBound: gridCheckboxHandler.onDataBound,
                        columns: [{
                            field: "Id",
                            headerTemplate: "<input id='returnItems-grid-mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50,
                            sortable: false
                        },{
                            field: "IssueItem.ItemName",
                            title: "@T("Item")"
                        },{
                            field: "IssueItem.ItemUnitOfMeasureName",
                            title: "@T("UnitOfMeasure")"
                        },{
                            field: "IssueItem.StoreLocatorName",
                            title: "@T("StoreLocator")"
                        },{
                            field: "IssueItem.IssueNumber",
                            title: "@T("Issue.Number")"
                        },{
                            field: "IssueItem.IssueDate",
                            title: "@T("Issue.IssueDate")",
                            template: '#= IssueItem.IssueDate != null ? kendo.toString(kendo.parseDate(IssueItem.IssueDate, "MM/dd/yyyy HH:mm:ss"), "MM/dd/yyyy HH:mm:ss") : "" #',
                        },{
                            field: "IssueItem.IssueQuantity",
                            title: "@T("IssueItem.IssueQuantity")",
                            template: '#= IssueItem.IssueQuantity != null ? kendo.toString(IssueItem.IssueQuantity, "n") : "" #'
                        },{
                            field: "ReturnQuantity",
                            title: "@T("ReturnItem.ReturnQuantity")",
                            template: '#= ReturnQuantity != null ? kendo.toString(ReturnQuantity, "n") : "" #'
                        },{
                            field: "ReturnCost",
                            title: "@T("ReturnItem.ReturnCost") [@(primarySystemCurrencySymbol)]",
                            template: '#= ReturnCost != null ? kendo.toString(ReturnCost, "n") : "" #'
                        },{
                            field: "Id",
                            headerTemplate: "",
                            width: 100,
                            template: '<button type="button" class="btn btn-primary@(allowRead || allowUpdate ? "" : " none-display")" onclick="editReturnItem(event, #=Id#);"></span><i class="fa fa-pencil aria-hidden="true""></i></a>' +
                                    '<button type="button" class="deleteRow btn btn-primary@(allowDelete ? "" : " none-display")" href="" onclick="deleteReturnItem(event, #=Id#);"></span><i class="fa fa-trash aria-hidden="true""></i></a>',
                            sortable: false
                        }]
                    });
                });
            </script>
        </div>
    </div>
</div>

<script type="text/javascript">
    function createReturnItems(e) {
        e.preventDefault();
        BaseEam.Grid.saveChanges('@Url.Action("CreateReturnItems", "Return")', '#createReturnItems-grid', '#createReturnItems-error', false);
    };

    function editReturnItem(e, id){
        e.preventDefault();
        //check if panel-returnItem is open => close it before edit
        if($('#panel-returnItem').is(":visible")){
            togglePanelReturnItem(false);
        }
        var postData = {
            id : id
        };
        addAntiForgeryToken(postData);

        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("ReturnItem", "Return"))",
            data: postData,
            success: function(data) {
                //append html
                $("#group-returnItems").append(data.Html);

                //apply binding for the newly generated element
                ko.applyBindings(viewModel, $("#panel-returnItem")[0]);

                //then toggle the panel
                togglePanelReturnItem(true);
            },
            error: function(xhr, ajaxOptions, thrownError) {
                showBSModal({title: 'ERROR', body: thrownError});
            },
            traditional: true
        });
    };

    function deleteReturnItem(e, id){
        e.preventDefault();
        //check if panel-returnItem is open => close it before delete
        if($('#panel-returnItem').is(":visible")){
            togglePanelReturnItem(false);
        }

        BaseEam.Grid.deleteRow($("#Id").val(), id, "@Url.Action("DeleteReturnItem", "Return")", "returnItems-grid", "", true);
    };

    function additionalData() {
        var data = {
            returnId: $("#Id").val()
        };
        addAntiForgeryToken(data);
        return data;
    }

    function togglePanelReturnItem(editmode) {
        if (editmode) {
            $('#panel-returnItem').show();
            $('#deleteSelectedReturnItems').hide();
            $('#createReturnItems').hide();
        }
        else {
            ////remove the panel html so we won't care
            //about dirty change tracking for newly added input tag
            $('#panel-returnItem').remove();
            $('#deleteSelectedReturnItems').show();
            $('#createReturnItems').show();
        }
    }

    $(document).ready(function () {

        $("#createReturnItems").click(function(e){
            e.preventDefault();
            $.get('@Url.Action("CreateReturnItemsView", "Return")', function(data) {
                showBSModal({
                    title: "@T("Common.AddMultiple")",
                    size: "large",
                    body: data,
                    actions: [{
                        label: '@T("Common.Save")',
                        cssClass: 'btn-success',
                        onClick: createReturnItems
                    },{
                        label: '@T("Common.Cancel")',
                        cssClass: 'btn-danger',
                        onClick: function(e){
                            $(e.target).parents('.modal').modal('hide');
                        }
                    }]
                });
            });
        });

        $("#deleteSelectedReturnItems").click(function(e){
            e.preventDefault();
            BaseEam.Grid.deleteSelectedRows($("#Id").val(), gridCheckboxHandler.selectedIds, "@Url.Action("DeleteSelectedReturnItems", "Return")", "returnItems-grid", "", true);
        });

        window.EventBroker.subscribe("grid_batch_saved", function (message, data) {
            //hide modal popup
            $('.modal').modal('hide');

            //refresh grid
            var grid = $('#returnItems-grid').data('kendoGrid');
            grid.dataSource.page(1);
        });
    });
</script>