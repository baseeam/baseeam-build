@using BaseEAM.Services.Security
@model PointModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().GridPageSizes;

    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Asset_Asset_Create)
        || permissionService.Authorize(StandardPermissionName.Asset_Location_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Asset_Asset_Read)
        || permissionService.Authorize(StandardPermissionName.Asset_Location_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Asset_Asset_Update)
        || permissionService.Authorize(StandardPermissionName.Asset_Location_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Asset_Asset_Delete)
        || permissionService.Authorize(StandardPermissionName.Asset_Location_Delete);
}
<div id="group-point" class="panel-group">
    @Html.Hidden("PointId", Model.Id)
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3">
                    @Html.BaseEamLabelFor(model => model.MeterGroupId, required: true)
                </div>
                <div class="col-md-9">
                    @Html.BaseEamComboBoxFor(model => model.MeterGroupId, "GetChoices", "Common",
                                            new RouteValueDictionary { { "dbTable", "MeterGroup" }, { "dbTextColumn", "Name" }, { "dbValueColumn", "Id" } }, true)
                </div>
            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <button type="button" id="createPointMeterLineItem" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddNew")">
                <i class="fa fa-plus-square"></i>
            </button>
            <button type="button" id="deleteSelectedPointMeterLineItems" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Delete.Selected")">
                <i class="fa fa-trash-o"></i>
            </button>
        </div>
        <div class="panel-body">
            <div id="pointMeterLineItems-error" class="validation-summary-errors none-display">
            </div>
            <div id="pointMeterLineItems-grid"></div>
            <script>
                var gridCheckboxHandlerForPoint = new BaseEam.CheckBoxHandler('pointMeterLineItems-grid');
                gridCheckboxHandlerForPoint.init();

                $(document).ready(function () {
                    $("#pointMeterLineItems-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("PointMeterLineItemList", "Point"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalDataForPoint
                                },
                                //This is used to map field to format that the server can understand
                                //it runs after the data (additionalData) populated
                                parameterMap: function(data, operation) {
                                    sortMapping = [
                                        { from: "MeterName", to: "Meter.Name" },
                                        { from: "MeterMeterTypeName", to: "Meter.MeterType.Name" },
                                        { from: "MeterUnitOfMeasureName", to: "Meter.UnitOfMeasure.Name" },
                                    ];
                                    BaseEam.Grid.mapSortColumns(data.sort, sortMapping);
                                    return data;
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        Id: { hidden: true, editable: false },
                                        Meter: { defaultValue: {} },
                                        MeterId: { hidden: true,}
                                    }
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @Html.Partial("_GridPagerMessages")
                        },
                        sortable: true,
                        editable: false,
                        scrollable: false,
                        dataBound: gridCheckboxHandlerForPoint.onDataBound,
                        columns: [{
                            field: "Id",
                            headerTemplate: "<input id='pointMeterLineItems-grid-mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50,
                            sortable: false
                        },{
                            field: "DisplayOrder",
                            title: "@T("PointMeterLineItem.DisplayOrder")"
                        },{
                            field: "MeterName",
                            title: "@T("Meter")",
                        },{
                            field: "MeterMeterTypeName",
                            title: "@T("Meter.MeterType")",
                        },{
                            field: "MeterUnitOfMeasureName",
                            title: "@T("UnitOfMeasure")",
                        },{
                            field: "LastReadingValue",
                            title: "@T("PointMeterLineItem.LastReadingValue")",
                        },{
                            field: "LastDateOfReading",
                            title: "@T("PointMeterLineItem.LastDateOfReading")",
                            template: '#= LastDateOfReading != null ? kendo.toString(kendo.parseDate(LastDateOfReading, "MM/dd/yyyy"), "MM/dd/yyyy") : "" #',
                        }, {
                            field: "Id",
                            headerTemplate: "",
                            width: 150,
                            template: '<button type="button" class="btn btn-primary@(allowRead || allowUpdate ? "" : " none-display")" onclick="editPointMeterLineItem(event, #=Id#);"></span><i class="fa fa-pencil aria-hidden="true""></i></a>' +
                            '<button type="button" class="deleteRow btn btn-primary@(allowDelete ? "" : " none-display")" onclick="deletePointMeterLineItem(event, #=Id#);"></span><i class="fa fa-trash aria-hidden="true""></i></a>' +
                             '<button type="button" class="btn btn-primary@(allowRead ? "" : " none-display")" onclick="viewReadingHistories(event, #=Id#);"></span><i class="fa fa-history aria-hidden="true""></i></a>',
                            sortable: false
                        }]
                    });
                });
            </script>
        </div>
    </div>
</div>

<script type="text/javascript">

    $("#MeterGroupId").change(function (e) {
        e.preventDefault();
        if ($("#MeterGroupId").val() == '') {
            return false;
        }
        var postData = {
            assetId: '@Model.AssetId',
            locationId: '@Model.LocationId',
            meterGroupId: $("#MeterGroupId").val()
        };
        addAntiForgeryToken(postData);
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("CreatePointMeterLineItems", "Point"))",
            data: postData,
            success: function (data) {
                if (data && data.Errors) {
                    showErrors(data.Errors, '#validation-summary');
                } else {
                    $("#group-point").find("#PointId").val(data.pointId);
                    //refresh grid
                    var grid = $('#pointMeterLineItems-grid').data('kendoGrid');
                    grid.dataSource.page(1);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                showBSModal({ title: 'ERROR', body: thrownError });
            },
            traditional: true
        });
    });

    function editPointMeterLineItem(e, id) {
        e.preventDefault();
        //check if panel-receiptItem is open => close it before edit
        if ($('#panel-pointMeterLineItem').is(":visible")) {
            togglePanelPointMeterLineItem(false);
        }
        var postData = {
            id: id
        };
        addAntiForgeryToken(postData);

        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("PointMeterLineItem", "Point"))",
            data: postData,
            success: function (data) {
                //append html
                $("#group-point").append(data.Html);
                //then toggle the panel
                togglePanelPointMeterLineItem(true);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                showBSModal({ title: 'ERROR', body: thrownError });
            },
            traditional: true
        });
    };

    function deletePointMeterLineItem(e, id) {
        e.preventDefault();
        //check if panel-pointMeterLineItems is open => close it before delete
        if ($('#panel-pointMeterLineItem').is(":visible")) {
            togglePanelPointMeterLineItem(false);
        }

        BaseEam.Grid.deleteRow($("#PointId").val(), id, "@Url.Action("DeletePointMeterLineItem", "Point")", "pointMeterLineItems-grid", "", true);
    };

    function additionalDataForPoint() {
        var data = {
            pointId: $("#group-point").find("#PointId").val(),
            assetId: '@Model.AssetId',
            locationId: '@Model.LocationId',
        };
        addAntiForgeryToken(data);
        return data;
    }

    function viewReadingHistories(e, pointMeterLineItemId) {
        e.preventDefault();

        var url = '@Url.Action("ReadingHistoriesView", "Point")' + '/' + pointMeterLineItemId ;
        $.get(url, function(data) {
            showBSModal({
                title: "@T("Reading.ReadingHistories")",
                size: "large",
                body: data,
                actions: [{
                    label: '@T("Common.Cancel")',
                    cssClass: 'btn-danger',
                    onClick: function (e) {
                        $(e.target).parents('.modal').modal('hide');
                    }
                }]
            });
        });
    }

    function togglePanelPointMeterLineItem(editmode) {
        if (editmode) {
            $('#panel-pointMeterLineItem').show();
            $('#deleteSelectedPointMeterLineItems').hide();
            $('#createPointMeterLineItem').hide();
        }
        else {
            ////remove the panel html so we won't care
            //about dirty change tracking for newly added input tag
            $('#panel-pointMeterLineItem').remove();
            $('#deleteSelectedPointMeterLineItems').show();
            $('#createPointMeterLineItem').show();
        }
    }

    $(document).ready(function () {

        $("#createPointMeterLineItem").click(function (e) {
            e.preventDefault();
            var postData = {
                assetId: '@Model.AssetId',
                locationId: '@Model.LocationId',
                pointId: $("#PointId").val()
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreatePointMeterLineItem", "Point"))",
                data: postData,
                success: function (data) {
                    $("#group-point").find("#PointId").val(data.pointId);
                    //append html
                    $("#group-point").append(data.Html);

                    //apply binding for the newly generated element
                    ko.applyBindings(viewModel, $("#panel-meterEvent")[0]);
                    viewModel.hasMeter(false);
                    //then toggle the panel
                    togglePanelPointMeterLineItem(true);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showBSModal({ title: 'ERROR', body: thrownError });
                },
                traditional: true
            });
        });

        $("#deleteSelectedPointMeterLineItems").click(function (e) {
            e.preventDefault();
            BaseEam.Grid.deleteSelectedRows($("#PointId").val(), gridCheckboxHandlerForPoint.selectedIds, "@Url.Action("DeleteSelectedPointMeterLineItems", "Point")", "pointMeterLineItems-grid", "", true);
        });
    });
</script>