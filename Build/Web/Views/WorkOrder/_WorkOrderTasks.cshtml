﻿@using BaseEAM.Services.Security
@model WorkOrderTaskModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().GridPageSizes;

    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Maintenance_WorkOrder_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Maintenance_WorkOrder_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Maintenance_WorkOrder_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Maintenance_WorkOrder_Delete);
}
<div id="group-workOrderTasks" class="panel-group">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3">
                    @Html.BaseEamLabelFor(model => model.WorkOrderNumber, required: true)
                </div>
                <div class="col-md-9">
                    <div class="form-text-row" data-bind="html: number"></div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.BaseEamLabelFor(model => model.TaskGroupId, required: true)
                </div>
                <div class="col-md-9">
                    @Html.BaseEamComboBoxFor(model => model.TaskGroupId, "GetChoices", "Common",
                                            new RouteValueDictionary { { "dbTable", "TaskGroup" }, { "dbTextColumn", "Name" }, { "dbValueColumn", "Id" } }, true, aysIgnore: true)
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <div class="col-md-3">
                    @Html.BaseEamLabelFor(model => model.WorkOrderStatus, required: true)
                </div>
                <div class="col-md-9">
                    <div class="form-text-row" data-bind="html: status"></div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="panel panel-default">
        <div class="panel-heading" data-bind="visible: !taskGroup()">
            <button type="button" id="createWorkOrderTask" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddNew")">
                <i class="fa fa-plus-square"></i>
            </button>
            <button type="button" id="deleteSelectedWorkOrderTasks" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Delete.Selected")">
                <i class="fa fa-trash-o"></i>
            </button>
        </div>
        <div class="panel-body">
            <div id="workOrderTasks-grid" data-bind="gridDeleteRowEnabled: !taskGroup()"></div>
            <script>
                var gridCheckboxHandler2 = new BaseEam.CheckBoxHandler('workOrderTasks-grid');
                gridCheckboxHandler2.init();

                $(document).ready(function () {
                    $("#workOrderTasks-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("WorkOrderTaskList", "WorkOrder"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData2
                                },
                                //This is used to map field to format that the server can understand
                                //it runs after the data (additionalData) populated
                                parameterMap: function (data, operation) {
                                    sortMapping = [{ from: "AssignedUserName", to: "AssignedUser.Name" },
                                        { from: "CompletedUserUserName", to: "CompletedUser.User.Name" }
                                    ];
                                    BaseEam.Grid.mapSortColumns(data.sort, sortMapping);
                                    return data;
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id"
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @Html.Partial("_GridPagerMessages")
                        },
                        sortable: true,
                        editable: false,
                        scrollable: false,
                        dataBound: gridCheckboxHandler2.onDataBound,
                        columns: [{
                            field: "Id",
                            headerTemplate: "<input id='workOrderTasks-grid-mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50,
                            sortable: false
                        },{
                            field: "Sequence",
                            title: "@T("WorkOrderTask.Sequence")"
                        }, {
                            field: "Description",
                            title: "@T("WorkOrderTask.Description")"
                        }, {
                            field: "AssignedUserName",
                            title: "@T("AssignedUser")"
                        }, {
                            field: "Completed",
                            title: "@T("WorkOrderTask.Completed")"
                        }, {
                            field: "CompletedUserName",
                            title: "@T("CompletedUser")"
                        }, {
                            field: "CompletedDate",
                            title: "@T("WorkOrderTask.CompletedDate")",
                            template: '#= CompletedDate != null ? kendo.toString(kendo.parseDate(CompletedDate, "MM/dd/yyyy HH:mm:ss"), "MM/dd/yyyy HH:mm:ss") : "" #'
                        }, {
                            field: "HoursSpent",
                            title: "@T("WorkOrderTask.HoursSpent")"
                        }, {
                            field: "ResultText",
                            title: "@T("WorkOrderTask.Result")",
                            sortable: false
                        }, {
                            field: "Id",
                            headerTemplate: "",
                            width: 100,
                            template: '<button type="button" class="btn btn-primary@(allowRead || allowUpdate ? "" : " none-display")" onclick="editWorkOrderTask(event, #=Id#);"></span><i class="fa fa-pencil aria-hidden="true""></i></a>' +
                                      '<button type="button" class="deleteRow btn btn-primary@(allowDelete ? "" : " none-display")" onclick="deleteWorkOrderTask(event, #=Id#);"></span><i class="fa fa-trash aria-hidden="true""></i></a>',
                            sortable: false
                        }]
                    });
                });
            </script>
        </div>
    </div>
</div>
<script type="text/javascript">
    function editWorkOrderTask(e, id){
        e.preventDefault();
        if($('#panel-workOrderTask').is(":visible")){
            togglePanelWorkOrderTask(false);
        }

        var postData = {
            id : id
        };
        addAntiForgeryToken(postData);

        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("WorkOrderTask", "WorkOrder"))",
            data: postData,
            success: function(data) {
                //append html
                $("#group-workOrderTasks").append(data.Html);

                //then toggle the panel
                togglePanelWorkOrderTask(true);
            },
            error: function(xhr, ajaxOptions, thrownError) {
                showBSModal({title: 'ERROR', body: thrownError});
            },
            traditional: true
        });
    };

    function deleteWorkOrderTask(e, id){
        e.preventDefault();
        //check if panel-workOrderTask is open => close it before delete
        if($('#panel-workOrderTask').is(":visible")){
            togglePanelWorkOrderTask(false);
        }

        BaseEam.Grid.deleteRow($("#Id").val(), id, "@Url.Action("DeleteWorkOrderTask", "WorkOrder")", "workOrderTasks-grid", "", true);
    };

    function additionalData2() {
        var data = {
            workOrderId: $("#Id").val()
        };
        addAntiForgeryToken(data);
        return data;
    }

    function togglePanelWorkOrderTask(editmode) {
        if (editmode) {
            $('#panel-workOrderTask').show();
            $('#createWorkOrderTask').hide();
            $('#deleteSelectedWorkOrderTasks').hide();
        }
        else {
            ////remove the panel html so we won't care
            //about dirty change tracking for newly added input tag
            $('#panel-workOrderTask').remove();
            $('#createWorkOrderTask').show();
            $('#deleteSelectedWorkOrderTasks').show();
        }
    }

    $(document).ready(function () {
        $("#createWorkOrderTask").click(function(e){
            e.preventDefault();
            var postData = {
                workOrderId : $("#Id").val()
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreateWorkOrderTask", "WorkOrder"))",
                data: postData,
                success: function(data) {
                    //append html
                    $("#group-workOrderTasks").append(data.Html);

                    //then toggle the panel
                    togglePanelWorkOrderTask(true);
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    showBSModal({title: 'ERROR', body: thrownError});
                },
                traditional: true
            });
        });

        $("#deleteSelectedWorkOrderTasks").click(function(e){
            e.preventDefault();
            BaseEam.Grid.deleteSelectedRows($("#Id").val(), gridCheckboxHandler2.selectedIds, "@Url.Action("DeleteSelectedWorkOrderTasks", "WorkOrder")", "workOrderTasks-grid", "", true);
        });

        $("#TaskGroupId").change(function (e) {
            e.preventDefault();
            var taskGroupId = $("#TaskGroupId").val();
            if (taskGroupId == '') {
                viewModel.taskGroup(false);
            } else {

                viewModel.taskGroup(taskGroupId);
            }
            var postData = {
                workOrderId: '@Model.WorkOrderId',
                taskGroupId: taskGroupId
            };
            addAntiForgeryToken(postData);
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CreateWorkOrderTasks", "WorkOrder"))",
                data: postData,
                success: function (data) {
                    if (data && data.Errors) {
                        showErrors(data.Errors, '#validation-summary');
                    } else {
                        //refresh grid
                        var grid = $('#workOrderTasks-grid').data('kendoGrid');
                        grid.dataSource.page(1);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showBSModal({ title: 'ERROR', body: thrownError });
                },
                traditional: true
            });
        });
    });
</script>
