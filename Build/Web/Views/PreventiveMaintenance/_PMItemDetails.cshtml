@using BaseEAM.Services.Security
@model PMItemModel
@{
    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Delete);

    var primarySystemCurrencySymbol = EngineContext.Current.Resolve<BaseEAM.Core.IWorkContext>().WorkingCurrency.CurrencySymbol;
}

<div id="panel-pMItem" class="panel panel-default eam-panel">
    <div class="panel-heading">
        <button type="button" id="savePMItemDetail" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Save")">
            <i class="fa fa-floppy-o"></i>
        </button>
        <button type="button" id="cancelPMItemDetail" class="btn btn-primary" title="@T("Common.Cancel")">
            <i class="fa fa-ban"></i>
        </button>
    </div>
    <div class="panel-body">
        @Html.Hidden("PreventiveMaintenanceId", Model.PreventiveMaintenanceId)
        @Html.Hidden("PMItemId", Model.Id)
        @Html.Hidden("ItemCategory", Model.ItemItemCategoryText)
        <div id="pMItem-error" class="validation-summary-errors none-display">
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.StoreId, required: true)
                        @Html.HiddenFor(model => model.StoreId)
                    </div>
                    <div class="col-md-9">
                        @Html.StoreLookupFor(model => model.StoreName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.ItemId, required: true)
                        @Html.HiddenFor(model => model.ItemId)
                    </div>
                    <div class="col-md-9">
                        @Html.ItemLookupFor(model => model.ItemName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.StoreLocatorId, required: true)
                    </div>
                    <div class="col-md-9">
                        @Html.BaseEamComboBoxFor(model => model.StoreLocatorId, "GetStoreLocators", "Common",
                                            new RouteValueDictionary { { "parentFieldName", "StoreId" }, { "additionalField", "ItemId" }, { "additionalValue", "" } }, true)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.ItemUnitOfMeasureName)
                    </div>
                    <div class="col-md-9" id="itemUOM">
                        @Model.ItemUnitOfMeasureName
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <h4>@T("PMItem.Plan")</h4>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.PlanQuantity)
                    </div>
                    <div class="col-md-9">
                        @Html.BaseEamEditorFor(model => model.PlanQuantity)
                    </div>
                </div>
                <div class="form-group" data-bind="visible: !itemCategoryTool()">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.UnitPrice)
                    </div>
                    <div class="col-md-9">
                        @Html.BaseEamEditorFor(model => model.UnitPrice, postfix: primarySystemCurrencySymbol)
                    </div>
                </div>
                <div class="form-group" data-bind="visible: itemCategoryTool()">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.PlanToolHours)
                    </div>
                    <div class="col-md-9">
                        @Html.BaseEamEditorFor(model => model.PlanToolHours)
                    </div>
                </div>
                <div class="form-group" data-bind="visible: itemCategoryTool()">
                    <div class="col-md-3">
                        @Html.BaseEamLabelFor(model => model.ToolRate)
                    </div>
                    <div class="col-md-9">
                        @Html.BaseEamEditorFor(model => model.ToolRate)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript">

        function refreshStoreLocatorDDL() {
            $("#StoreLocatorId").data("kendoComboBox").dataSource.read();
        }

        $("#savePMItemDetail").click(function (e) {
            e.preventDefault();
            var $group = $("#panel-pMItem :input");
            var postData = $group.serializeJSON({ checkboxUncheckedValue: "false" });
            //change Id property name so it can map to MVC model
            postData.Id = postData.PMItemId;
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("SavePMItem", "PreventiveMaintenance"))",
                data: postData,
                success: function (data) {
                    if (data && data.Errors) {
                        showErrors(data.Errors, '#pMItem-error');
                    } else {
                        //then toggle the panel
                        togglePanelPMItem(false);

                        //refresh grid
                        var grid = $('#pMItems-grid').data('kendoGrid');
                        grid.dataSource.page(1);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showBSModal({ title: 'ERROR', body: thrownError });
                },
                traditional: true
            });
        });

        $("#cancelPMItemDetail").click(function (e) {
            e.preventDefault();
            var postData = {
                id: $("#PMItemId").val()
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("CancelPMItem", "PreventiveMaintenance"))",
                data: postData,
                success: function (data) {
                    //toggle the panel
                    togglePanelPMItem(false);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showBSModal({ title: 'ERROR', body: thrownError });
                },
                traditional: true
            });
        });

        window.EventBroker.subscribe(BaseEam.Events.SLStoreSelected, function (message, data) {
            var storeId = $("#StoreId").val();
            if (storeId == "") {
                return false;
            }
            refreshStoreLocatorDDL();
        });

        window.EventBroker.subscribe(BaseEam.Events.SLItemSelected, function (message, data) {
            var itemId = $("#ItemId").val();
            if (itemId == "") {
                return false;
            }
            var postData = {
                itemId
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("ItemInfo", "Item"))",
                data: postData,
                success: function (data) {
                    if (data != null && data.itemInfo != null) {
                        $("#panel-pMItem").find("#itemUOM").html(data.itemInfo.UnitOfMeasure.Name);
                        $('#ItemCategory').val(data.itemInfo.ItemCategoryText);
                        viewModel.itemCategoryTool(data.itemInfo.ItemCategoryText == 'Tool' ? true : false);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    showBSModal({ title: 'ERROR', body: thrownError });
                },
                traditional: true
            });
            refreshStoreLocatorDDL();
        });
    </script>
</div>
