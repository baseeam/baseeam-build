@using BaseEAM.Services.Security
@model PreventiveMaintenanceModel
@{
    var defaultGridPageSize = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<BaseEAM.Core.Domain.GeneralSettings>().GridPageSizes;
    var primarySystemCurrencySymbol = EngineContext.Current.Resolve<BaseEAM.Core.IWorkContext>().WorkingCurrency.CurrencySymbol;

    var permissionService = EngineContext.Current.Resolve<BaseEAM.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Maintenance_PreventiveMaintenance_Delete);
}
<div id="group-meterEvents" class="panel-group" data-bind="visible: !isNew()">
    <div class="panel panel-default">
        <div class="panel-heading">
            <button type="button" id="selectMeterEvents" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.AddNew")">
                <i class="fa fa-plus-square"></i>
            </button>
            <button type="button" id="deleteSelectedMeterEvents" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Delete.Selected")">
                <i class="fa fa-trash-o"></i>
            </button>
        </div>
        <div class="panel-body">
            <div id="meterEvents-grid"></div>
            <script>
                var gridCheckboxHandler1_2 = new BaseEam.CheckBoxHandler('meterEvents-grid');
                gridCheckboxHandler1_2.init();

                $(document).ready(function () {
                    $("#meterEvents-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("MeterEventList", "PreventiveMaintenance"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: additionalData1_2
                                },
                                parameterMap: function(data, operation) {
                                    sortMapping = [
                                        {from: "MeterName", to: "Meter.Name"}
                                    ];
                                    BaseEam.Grid.mapSortColumns(data.sort, sortMapping);
                                    return data;
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id"
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @Html.Partial("_GridPagerMessages")
                        },
                        sortable: true,
                        editable: false,
                        scrollable: false,
                        dataBound: gridCheckboxHandler1_2.onDataBound,
                        columns: [{
                            field: "Id",
                            headerTemplate: "<input id='meterEvents-grid-mastercheckbox' type='checkbox'/>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                            width: 50,
                            sortable: false
                        },{
                            field: "DisplayOrder",
                            title: "@T("MeterEvent.DisplayOrder")"
                        },{
                            field: "Description",
                            title: "@T("MeterEvent.Description")"
                        },{
                            field: "MeterName",
                            title: "@T("Meter")",
                        },{
                            field: "LowerLimit",
                            title: "@T("MeterEvent.LowerLimit")",
                            template: '#= LowerLimit != null ? kendo.toString(LowerLimit, "n") : "" #'
                        },{
                            field: "UpperLimit",
                            title: "@T("MeterEvent.UpperLimit")",
                            template: '#= UpperLimit != null ? kendo.toString(UpperLimit, "n") : "" #'
                        }, {
                            field: "Id",
                            headerTemplate: "",
                            width: 50,
                            template: '<button type="button" class="deleteRow btn btn-primary@(allowDelete ? "" : " none-display")" onclick="deleteMeterEvent(event, #=Id#);"></span><i class="fa fa-trash aria-hidden="true""></i></a>',
                            sortable: false
                        }]
                    });
                });
            </script>
        </div>
    </div>
</div>

<script type="text/javascript">

    function deleteMeterEvent(e, id){
        e.preventDefault();
        //check if panel-meterEvent is open => close it before delete
        if($('#panel-meterEvent').is(":visible")){
            togglePanelMeterEvent(false);
        }

        BaseEam.Grid.deleteRow($("#Id").val(), id, "@Url.Action("DeleteMeterEvent", "PreventiveMaintenance")", "meterEvents-grid", "", true);
    };

    function additionalData1_2() {
        var data = {
            preventiveMaintenanceId: '@Model.Id'
        };
        addAntiForgeryToken(data);
        return data;
    }

    function togglePanelMeterEvent(editmode) {
        if (editmode) {
            $('#panel-meterEvent').show();
            $('#createMeterEvent').hide();
            $('#deleteSelectedMeterEvents').hide();
        }
        else {
            ////remove the panel html so we won't care
            //about dirty change tracking for newly added input tag
            $('#panel-meterEvent').remove();
            $('#createMeterEvent').show();
            $('#deleteSelectedMeterEvents').show();
        }
    }
    function selectMeterEvents(e) {
        e.preventDefault();
        var postData = {
            selectedIds: meterEventsCheckboxHandler.selectedIds,
            preventiveMaintenanceId: '@Model.Id'
        };
        addAntiForgeryToken(postData);
        $.ajax({
            cache: false,
            type: "POST",
            url: '@Url.Action("AddMeterEvents", "PreventiveMaintenance")',
            data: postData,
            success: function (data) {
                if (data && data.Errors) {
                    showErrors(data.Errors, '#ml-meterEvents-error');
                } else {
                    //hide modal popup
                    $(e.target).parents('.modal').modal('hide');

                    //refresh grid
                    var grid = $('#meterEvents-grid').data('kendoGrid');
                    grid.dataSource.page(1);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                showBSModal({ title: "Error", body: thrownError });
            },
            traditional: true
        });
    }


    $(document).ready(function () {

        $("#selectMeterEvents").click(function(e){
            e.preventDefault();
            var url = "@Html.Raw(Url.Action("MLMeterEventView", "Lookup"))"
                + "?assetId=" + $("#AssetId").val()
                + "&locationId=" + $("#LocationId").val();
            $.get(url, function(data) {
                showBSModal({
                    title: "@T("MeterEvent.SelectMeterEvents")",
                    size: "large",
                    body: data,
                    actions: [{
                        label: '@T("Common.Save")',
                        cssClass: 'btn-success',
                        onClick: selectMeterEvents
                    },{
                        label: '@T("Common.Cancel")',
                        cssClass: 'btn-danger',
                        onClick: function(e){
                            $(e.target).parents('.modal').modal('hide');
                        }
                    }]
                });
            });
        });

        $("#deleteSelectedMeterEvents").click(function(e){
            e.preventDefault();
            BaseEam.Grid.deleteSelectedRows($("#Id").val(), gridCheckboxHandler1_2.selectedIds, "@Url.Action("DeleteSelectedMeterEvents", "PreventiveMaintenance")", "meterEvents-grid", "", true);
        });
    });
</script>